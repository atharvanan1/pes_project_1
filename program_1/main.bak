#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

struct input
	{
		int64_t num;
		int radix;
		int size;
	}lin[11];

int proc_input(struct input);
void print_output(struct input);

const uint8_t MAX_4 = 7;
const uint8_t MIN_4 = -8;
const uint8_t MAX_8 = UINT8_MAX;
const uint8_t MIN_8 = INT8_MIN;
const uint16_t MAX_16 = UINT16_MAX;
const uint16_t MIN_16 = INT16_MAX;
char c[20];

//int binary_print(int);

int main (void)
{
	char line[12][25];
	FILE *fp1 = NULL;
	//FILE *fp2 = NULL;
	
	fp1 = fopen("input","r");
	//fp2 = fopen("output", "w");
	if(fp1 == NULL)
	{
		printf("Error: file doesn't exist\n");
	}
	else
	{
		printf("Success\n");
		int i = 0, j = 0;
		int c;
		while((c = getc(fp1)) != EOF)
		{
			line[i][j] = c;
			j++;
			if(c == '\n')
			{
				line[i][j] = '\0';
				i++;
				j = 0;
			}
		}
		fclose(fp1);
		for(int i = 0; i < 11; i++)
		{
			if(i == 5)
			/* URL - https://medium.com/@zoha131/fun-with\
			 * -scanf-in-c-3d7a8d310229 */
			{
				sscanf(line[i], "{%lo, %d, %d}\n", \
						&lin[i].num, &lin[i]\
						.radix, &lin[i].size);
			}
			else if(i == 6)
			{
				sscanf(line[i], "{%lx, %d, %d}\n", \
						&lin[i].num, &lin[i]\
						.radix, &lin[i].size);
			}
			else
			{
				sscanf(line[i], "{%ld, %d, %d}\n", \
						&lin[i].num, &lin[i]\
						.radix, &lin[i].size);	
			}
		}
		for(int i = 0; i < 11; i++)
		{
			if(proc_input(lin[i]) == 1)
			{
				printf("Error occured at input #%d\n"\
						, i+1);
			}
			else
			{
				print_output(lin[i]);
			}
		}
	}
	return 0;
}

int proc_input(struct input line)
{	
	if(line.size != 4 && line.size != 8 && line.size != 16)
	{
		printf("Input error! Invalid size.\n");
		return 1;
	}
	if(line.radix != 8 && line.radix != 10 && line.radix != 16)
	{
		printf("Input error! Invalid radix.\n");
		return 1;
	}
	switch(line.size)
	{
		case 4:
			if(line.num > 15)
			{
				return 1;
			}
			else if(line.num < -8)
			{
				return 1;
			}
			break;
		case 8:
			if(line.num > UINT8_MAX)
			{
				return 1;
			}
			else if(line.num < INT8_MIN)
			{
				return 1;
			}
			break;
		case 16:
			if(line.num > UINT16_MAX)
			{
				return 1;
			}
			else if(line.num < INT16_MIN)
			{
				return 1;
			}
			break;
	}
	return 0;
}

void print_output(struct input line)
{
	int x = abs((int)line.num);
	printf("\tValue\tMaximum\tMinimum\n");
	printf("Binary(abs) %s %s %s\n", binary_print(x), binary_print(MAX_4), binary_print(MIN_4));
	printf("Octal(abs) %#o %#o %#o\n", x, MAX_8, MIN_8);
	printf("Decimal(abs)%d %d %d\n", x, MAX_16, MIN_16);
	printf("Hexadecimal(abs) %#x %#x %#x\n", x, MAX_4, MIN_4);
//	printf("Signed One's Complement %d %d %d\n",);
//	printf("Signed Two's Complement\t0b1111111111111111\t0b1111111111111111\t0b1111111111111111\n");
//	printf("Sign-Magnitude\t\t\t\t0b1111111111111111\t0b1111111111111111\t0b1111111111111111\n");
}

char * binary_print(uint16_t binary, uint8_t digits)
{
        c[0] = '0';
        c[1] = 'b';
        int len = 2 + digits;
        for(int i = len - 1; i > 1; i--)
        {
                if(binary & 0x01)
                {
                        c[i] = '1';
                }
                else
                {
                        c[i] = '0';
                }
                binary = binary >> 1;
        }
        c[len] = '\0';
        return c;
}

/* Citations */
//https://stackoverflow.com/questions/41265244/is-there-a-general-way-in-c-to-make-a-number-greater-than-64-bits-or-smaller-tha
